def ewma_plus_stddev(stream, duration_, num_stddev):
    return stream.ewma(over=duration(duration_)) + num_stddev * stream.stddev(over=duration(duration_))


def clamper(stream, current_window_, historical_window_, num_stddev, calculation_mode):
    abs_num_stddev = abs(num_stddev)
    if calculation_mode == 'vanilla':
        top = stream.mean_plus_stddev(stddevs=abs_num_stddev, over=historical_window_)
        bot = stream.mean_plus_stddev(stddevs=-1 * abs_num_stddev, over=historical_window_)
        clamped = max(bot, min(stream, top)) if stream is not None else None
        return clamped.timeshift(current_window_).mean_plus_stddev(stddevs=num_stddev, over=historical_window_)
    elif calculation_mode == 'ewma':
        top = ewma_plus_stddev(stream.timeshift(current_window_), historical_window_, abs_num_stddev)
        bot =  ewma_plus_stddev(stream.timeshift(current_window_), historical_window_, -1 * abs_num_stddev)
        clamped = max(bot, min(stream.timeshift(current_window_), top)) if stream.timeshift(current_window_) is not None else None
        return ewma_plus_stddev(clamped, historical_window_, num_stddev)


def mean_std(stream, current_window=duration('5m'),
                     historical_window=duration('1h'),
                     fire_num_stddev=3, clear_num_stddev=2.5,
                     ignore_extremes=True, calculation_mode='vanilla'):
    current_window_ = duration(current_window)
    historical_window_ = duration(historical_window)
    def h(x):
        if ignore_extremes:
            return clamper(stream, current_window_, historical_window_, x, calculation_mode)
        else:
            if calculation_mode == 'vanilla':
                return stream.timeshift(current_window_).mean_plus_stddev(stddevs=x, over=historical_window_)
            elif calculation_mode == 'ewma':
                return ewma_plus_stddev(stream.timeshift(current_window_), historical_window_, x)
    recent_min = stream.min(over=current_window_)
    recent_max = stream.max(over=current_window_)
    f_bot = h(-1 * fire_num_stddev)
    c_bot = h(-1 * clear_num_stddev)
    c_top = h(clear_num_stddev)
    f_top = h(fire_num_stddev)
    return recent_min, recent_max, f_bot, c_bot, c_top, f_top