# These functions transform a stream into detectors which fire when the recent window
# (default length is 5 minutes) is very different from the preceding window (default length 1 hour).
#
# The basic toggles are:
#   the windows to compare (by default, current 5 minutes against previous 1 hour),
#   strategy (rolling mean + standard deviations, or rolling percentile comparison),
#   the sensitivity of the detector (the number of deviations in the first case, the
#       percentile used to define the threshold in the latter),
#   and the orientation (above, below, or out-of-band).
#
# By default the firing and clearing thresholds are different (to reduce flappiness).
#
# These detectors are appropriate for signals with stationary behavior, i.e., those with a
# a distribution that does not change over time. In particular, these are not appropriate for
# signals with a strong periodicity or trend.
#
# Remark: the duration parameter of the detect block enters as the window being evaluated, and
#         the shift applied before summarizing a historical window. The percent of duration could
#         be incorporated by replacing "min" and "max" in the detect blocks with percentiles.
#
# @author joe


def detector_helper(recent_min, recent_max, f_bot, c_bot, c_top, f_top, orientation, annotations, event_annotations=None):
    if orientation == 'above':
        return detect(when(recent_min > f_top), when(recent_max < c_top), annotations=annotations, event_annotations=event_annotations)
    elif orientation == 'below':
        return detect(when(recent_max < f_bot), when(recent_min > c_bot), annotations=annotations, event_annotations=event_annotations)
    elif orientation == 'out_of_band':
        return detect(when(recent_min > f_top or recent_max < f_bot),
                      when(recent_max < c_top and recent_min > c_bot),
                      mode='split',
                      annotations=annotations, event_annotations=event_annotations)


def ewma_plus_stddev(stream, duration_, num_stddev):
    return stream.ewma(over=duration(duration_)) + num_stddev * stream.stddev(over=duration(duration_))


def detector_mean_std(stream, current_window=duration('5m'),
                      historical_window=duration('1h'),
                      fire_num_stddev=3, clear_num_stddev=2.5,
                      orientation='above', ignore_extremes=True, calculation_mode='vanilla'):
    current_window_ = duration(current_window)
    historical_window_ = duration(historical_window)
    # Args:
    #       stream: data stream
    #       current_window (duration) : the window whose behavior is being tested for abnormality
    #           (optional, default=duration('5m'))
    #       historical_window (duration): the window whose behavior is used to define normality
    #           (optional, default=duration('1h'))
    #       fire_num_stddev (number): number of standard deviations different from historical mean
    #           required to fire (optional, default=3)
    #       clear_num_stddev (number): number of standard deviations different from historical mean
    #           required to clear (optional, default=2.5)
    #       orientation (string): specifies whether detect fires when signal is above, below, or
    #           or out-of-band (optional, default='above', one of 'above', 'below', 'out_of_band')
    #       ignore_extremes (boolean): specifies whether to filter the historical_window by
    #           excluding points more than fire_num_stddev/clear_num_stddev away from the mean
    #           before calculating the band
    #       calculation_mode (string): 'vanilla' or 'ewma'
    #
    # Returns:
    #       detect block that fires when the last (current_window) of stream is at least
    #           fire_num_stddev standard deviations above/below/away from the mean of the
    #           preceding historical_window,
    #           and clears when the last (current_window) of stream remains below/above/within
    #           clear_num_stddev standard deviations above/below/of the mean of the
    #           preceding historical_window
    assert fire_num_stddev >= clear_num_stddev, {'fire_num_stddev' : fire_num_stddev, 'clear_num_stddev' : clear_num_stddev,
       'sfui_errorKeys' : ['fire_num_stddev', 'clear_num_stddev'],
       'sfui_errorTemplate': "{{{fire_num_stddev}}} must be greater than or equal to {{{clear_num_stddev}}}."}
    def h(x):
        if ignore_extremes:
            abs_x = abs(x)
            if calculation_mode == 'vanilla':
                top = stream.mean_plus_stddev(stddevs=abs_x, over=historical_window_)
                bot = stream.mean_plus_stddev(stddevs=-1 * abs_x, over=historical_window_)
                damped = max(bot, min(stream, top)) if stream is not None else None
                return damped.timeshift(current_window_).mean_plus_stddev(stddevs=x, over=historical_window_)
            elif calculation_mode == 'ewma':
                top = ewma_plus_stddev(stream.timeshift(current_window_), historical_window_, abs_x)
                bot =  ewma_plus_stddev(stream.timeshift(current_window_), historical_window_, -1 * abs_x)
                damped = max(bot, min(stream.timeshift(current_window_), top)) if stream.timeshift(current_window_) is not None else None
                return ewma_plus_stddev(damped, historical_window_, x)
        else:
            if calculation_mode == 'vanilla':
                return stream.timeshift(current_window_).mean_plus_stddev(stddevs=x, over=historical_window_)
            elif calculation_mode == 'ewma':
                return ewma_plus_stddev(stream.timeshift(current_window_), historical_window_, x)
    recent_min = stream.min(over=current_window_)
    recent_max = stream.max(over=current_window_)
    fb = h(-1 * fire_num_stddev)
    cb = h(-1 * clear_num_stddev)
    ct = h(clear_num_stddev)
    ft = h(fire_num_stddev)
    annotations = [annotate(recent_min, 'rolling minimum', {'sfui_streamType': 'signal'}),
                   annotate(recent_max, 'rolling maximum', {'sfui_streamType': 'signal'}),
                   annotate(fb, 'lower fire threshold', {'sfui_streamType': 'threshold',
                                                         'sfui_state':'fire',
                                                         'sfui_orientation':'below',
                                                         'sfui_trigger':'outside',
                                                         'influencedBy': 'fire_num_stddev'}),
                   annotate(ft, 'upper fire threshold', {'sfui_streamType': 'threshold',
                                                         'sfui_state':'fire',
                                                         'sfui_orientation':'above',
                                                         'sfui_trigger':'outside',
                                                         'influencedBy': 'fire_num_stddev'}),
                   annotate(cb, 'lower clear threshold',
                            {'sfui_streamType': 'threshold',
                             'sfui_state':'clear',
                             'sfui_orientation':'below',
                             'sfui_trigger':'outside' ,
                             'influencedBy': 'clear_num_stddev'}),
                   annotate(ct, 'upper clear threshold',
                            {'sfui_streamType': 'threshold',
                             'sfui_state':'clear',
                             'sfui_orientation':'above',
                             'sfui_trigger':'outside',
                             'influencedBy': 'clear_num_stddev'})]
    event_annotations = {'current_window': str(current_window_)}
    return detector_helper(recent_min, recent_max, fb, cb, ct, ft, orientation, annotations, event_annotations)


def detector_percentile(stream, current_window=duration('5m'),
                        historical_window=duration('1h'),
                        fire_percentile_threshold=99, clear_percentile_threshold=95,
                        orientation='above'):
    # Args:
    #       stream: data stream
    #       current_window (duration) : the window whose behavior is being tested for abnormality
    #           (optional, default=duration('5m'))
    #       historical_window (duration): the window whose behavior is used to define normality
    #           (optional, default=duration('1h'))
    #       fire_percentile_threshold (number): percentile of historical_window used as a
    #           threshold for firing (optional, default=99)
    #       clear_percentile_threshold (number): percentile of historical_window used as a
    #           threshold for clearing (optional, default=95)
    #       orientation (string): specifies whether detect fires when signal is above, below, or
    #           or out-of-band (optional, default='above', one of 'above', 'below', 'out_of_band')
    #
    # Returns:
    #       detect block that fires when the last (current_window) of stream exceeds (or drops
    #           below, or goes out of band) the fire_percentile_threshold of the
    #           preceding historical_window,
    #           and clears when the last (current_window) of stream remains below (or above, or
    #           within band) the clear_percentile_threshold of the preceding historical_window
    fire_derived = abs(fire_percentile_threshold - 50)
    clear_derived = abs(clear_percentile_threshold - 50)
    current_window_ = duration(current_window)
    historical_window_ = duration(historical_window)
    assert fire_derived >= clear_derived, {'fire_percentile_threshold' : fire_derived, 'clear_percentile_threshold' : clear_derived,
       'sfui_errorKeys' : ['fire_percentile_threshold', 'clear_percentile_threshold'],
       'sfui_errorTemplate': "{{{fire_percentile_threshold}}} must be further from 50 than {{{clear_percentile_threshold}}}."}
    def j(x):
        return stream.timeshift(current_window_).percentile(x, over=historical_window_)
    recent_min = stream.min(over=current_window_)
    recent_max = stream.max(over=current_window_)
    if fire_percentile_threshold > 50:
        fb = j(100 - fire_percentile_threshold)
        ft = j(fire_percentile_threshold)
    else:
        fb = j(fire_percentile_threshold)
        ft = j(100 - fire_percentile_threshold)
    if clear_percentile_threshold > 50:
        cb = j(100 - clear_percentile_threshold)
        ct = j(clear_percentile_threshold)
    else:
        cb = j(clear_percentile_threshold)
        ct = j(100 - clear_percentile_threshold)
    annotations = [annotate(recent_min, 'rolling minimum', {'sfui_streamType': 'signal'}),
                   annotate(recent_max, 'rolling maximum', {'sfui_streamType': 'signal'}),
                   annotate(fb, 'lower fire threshold', {'sfui_streamType': 'threshold',
                                                         'sfui_state':'fire',
                                                         'sfui_orientation':'below',
                                                         'sfui_trigger':'outside',
                                                         'influencedBy': 'fire_percentile_threshold'}),
                   annotate(ft, 'upper fire threshold', {'sfui_streamType': 'threshold',
                                                         'sfui_state':'fire',
                                                         'sfui_orientation':'above',
                                                         'sfui_trigger':'outside' ,
                                                         'influencedBy': 'fire_percentile_threshold'}),
                   annotate(cb, 'lower clear threshold',
                            {'sfui_streamType': 'threshold',
                             'sfui_state':'clear',
                             'sfui_orientation':'below',
                             'sfui_trigger':'outside' ,
                             'influencedBy': 'clear_percentile_threshold'}),
                   annotate(ct, 'upper clear threshold',
                            {'sfui_streamType': 'threshold',
                             'sfui_state':'clear',
                             'sfui_orientation':'above',
                             'sfui_trigger':'outside' ,
                             'influencedBy': 'clear_percentile_threshold'})]
    event_annotations = {'current_window': str(current_window_)}
    return detector_helper(recent_min, recent_max, fb, cb, ct, ft, orientation, annotations, event_annotations)


def generic_detector_growth_rate(stream, current_window=duration('5m'),
                      historical_window=duration('1h'),
                      fire_growth_rate_threshold=0.2, clear_growth_rate_threshold=0.1,
                      orientation='above', calculation_mode='vanilla'):
    # Args:
    #       stream: data stream
    #       current_window (duration) : the window whose behavior is being tested for abnormality
    #           (optional, default=duration('5m'))
    #       historical_window (duration): the window whose behavior is used to define normality
    #           (optional, default=duration('1h'))
    #       fire_growth_rate_threshold (number): percentage change over historical mean
    #           required to fire (optional, default=0.2)
    #       clear_growth_rate_threshold (number): percentage change over historical mean
    #           required to clear (optional, default=0.1)
    #       orientation (string): specifies whether detect fires when signal is above, below, or
    #           or out-of-band (optional, default='above', one of 'above', 'below', 'out_of_band')
    #       calculation_mode (string): specifies whether to use rolling mean or exponentially
    #           weighted mean (optional, default='vanilla', one of 'vanilla', 'ewma')
    #  Returns:
    #       detect block that fires when the last (current_window) of stream exhibits percentage change of at least
    #           fire_growth_rate_threshold (positive, negative, or either) compared to the mean of the
    #           preceding historical_window,
    #           and clears when the last (current_window) of stream exhibits percentage change of no more than
    #           clear_growth_rate_threshold compared to the mean of the
    #           preceding historical_window
    assert fire_growth_rate_threshold >= clear_growth_rate_threshold, {
        'fire_growth_rate_threshold': fire_growth_rate_threshold,
        'clear_growth_rate_threshold': clear_growth_rate_threshold,
        'sfui_errorKeys': ['fire_growth_rate_threshold', 'clear_growth_rate_threshold'],
        'sfui_errorTemplate': "{{{fire_growth_rate_threshold}}} must be greater than or equal to {{{clear_growth_rate_threshold}}}."}
    if calculation_mode == 'vanilla':
        previous = stream.timeshift(duration(current_window)).mean(over=duration(historical_window))
    elif calculation_mode == 'ewma':
        previous = stream.timeshift(duration(current_window)).ewma(over=duration(historical_window))
    current_window_duration = duration(current_window)
    recent_min = stream.min(over=current_window_duration)
    recent_max = stream.max(over=current_window_duration)
    fb = (1 - fire_growth_rate_threshold) * previous
    cb = (1 - clear_growth_rate_threshold) * previous
    ct = (1 + clear_growth_rate_threshold) * previous
    ft = (1 + fire_growth_rate_threshold) * previous
    annotations = [annotate(recent_min, 'rolling minimum', {'sfui_streamType': 'signal'}),
                   annotate(recent_max, 'rolling maximum', {'sfui_streamType': 'signal'}),
                   annotate(fb, 'lower fire threshold', {'sfui_streamType': 'threshold',
                                                         'sfui_state':'fire',
                                                         'sfui_orientation':'below',
                                                         'sfui_trigger':'outside',
                                                         'influencedBy': 'fire_growth_rate_threshold'}),
                   annotate(ft, 'upper fire threshold', {'sfui_streamType': 'threshold',
                                                         'sfui_state':'fire',
                                                         'sfui_orientation':'above',
                                                         'sfui_trigger':'outside' ,
                                                         'influencedBy': 'fire_growth_rate_threshold'}),
                   annotate(cb, 'lower clear threshold',
                            {'sfui_streamType': 'threshold',
                             'sfui_state':'clear',
                             'sfui_orientation':'below',
                             'sfui_trigger':'outside' ,
                             'influencedBy': 'clear_growth_rate_threshold'}),
                   annotate(ct, 'upper clear threshold',
                            {'sfui_streamType': 'threshold',
                             'sfui_state':'clear',
                             'sfui_orientation':'above',
                             'sfui_trigger':'outside' ,
                             'influencedBy': 'clear_growth_rate_threshold'})]
    event_annotations = {'current_window': str(current_window_duration)}
    return detector_helper(recent_min, recent_max, fb, cb, ct, ft, orientation, annotations, event_annotations)


def detector_growth_rate_vanilla(stream, current_window=duration('5m'),
                                 historical_window=duration('1h'),
                                 fire_growth_rate_threshold=0.2, clear_growth_rate_threshold=0.1,
                                 orientation='above', calculation_mode='vanilla'):
    return generic_detector_growth_rate(stream, current_window=current_window,
                                        historical_window=historical_window,
                                        fire_growth_rate_threshold=fire_growth_rate_threshold,
                                        clear_growth_rate_threshold=clear_growth_rate_threshold,
                                        orientation=orientation, calculation_mode=calculation_mode)


# deprecated
def detector_growth_rate_ewma(stream, current_window=duration('5m'),
                              alpha=0.05,
                              fire_growth_rate_threshold=0.2, clear_growth_rate_threshold=0.1,
                              orientation='above'):
    return generic_detector_growth_rate(stream, current_window=current_window,
                                        historical_window=None, alpha=alpha,
                                        fire_growth_rate_threshold=fire_growth_rate_threshold,
                                        clear_growth_rate_threshold=clear_growth_rate_threshold,
                                        orientation=orientation, calculation_mode='ewma')


# examples
# detector_mean_std(data('jvm.cpu.load').percentile(70), fire_num_stddev=2,
#                         clear_num_stddev=1).publish('abover')

#detector_percentile(data('jvm.cpu.load'), current_window=duration('10m'),
#                                historical_window=duration('10m'), fire_percentile_threshold=90,
#                                clear_percentile_threshold=75, orientation='out_of_band').publish('pctile')


# detector_percentile(data('jvm.cpu.load'), current_window=duration('10m'),
#                                historical_window=duration('10m'), fire_percentile_threshold=77,
#                                clear_percentile_threshold=75, orientation='out_of_band').publish('pctile')
