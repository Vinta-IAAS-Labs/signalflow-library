# These functions transform a stream into detectors which fire when the recent window
# (default length is 15 minutes) is very different from the same period timeshifted by some
# unit (default shift is 1 week).
#
# The basic toggles are:
#   the length of windows to compare (by default, 15 minutes),
#   the space between windows (by default, 1 week, corresponding to week-over-week comparison),
#   the number of historical windows used to establish a baseline (by default, 4),
#   whether to exclude historical outliers when computing the baseline (i.e., whether to use
#       median or mean of the historical bands, default is to exclude),
#   whether to construct historical bands using growth rate or standard deviations,
#   and the orientation (above, below, or out-of-band).
#
# By default the firing and clearing thresholds are different (to reduce flappiness).
#
# These detectors are appropriate for signals with periodic behavior. The period enters via
# the space_between_windows argument.
#
# @author joe

from signalfx.detectors.against_periods import utils
from signalfx.detectors.against_periods import streams

RECURSION_LIMIT = 8


def detector_helper(summary, fire_bot, clear_bot, clear_top, fire_top, orientation, annotations,
                    event_annotations=None, auto_resolve_after=None):
    if orientation == 'above':
        return detect(when(summary > fire_top), when(summary < clear_top), annotations=annotations,
                      event_annotations=event_annotations, auto_resolve_after=auto_resolve_after)
    elif orientation == 'below':
        return detect(when(summary < fire_bot), when(summary > clear_bot), annotations=annotations,
                      event_annotations=event_annotations, auto_resolve_after=auto_resolve_after)
    elif orientation == 'out_of_band':
        return detect(when(summary > fire_top or summary < fire_bot),
                      when(summary < clear_top and summary > clear_bot), mode='split',
                      annotations=annotations, event_annotations=event_annotations,
                      auto_resolve_after=auto_resolve_after)


h = streams.h
n_period_trimmed_mean = streams.n_period_trimmed_mean
n_period_trimmed_threshold = streams.n_period_trimmed_threshold
n_period_mean_and_var_plus_msq = streams.n_period_mean_and_var_plus_msq
n_period_untrimmed_threshold = streams.n_period_untrimmed_threshold
across_period_summaries = streams.across_period_summaries
n_period_summary = streams.n_period_summary
period_summaries = streams.period_summaries
triple_ewma = streams.triple_ewma


def detector_growth_rate(stream, window_to_compare=duration('15m'),
                         space_between_windows=duration('1w'),
                         num_windows=4, fire_growth_rate_threshold=0.2,
                         clear_growth_rate_threshold=0.1,
                         discard_historical_outliers=True, orientation='above',
                         auto_resolve_after=None):
    window_to_compare_dur = duration(window_to_compare)
    space_between_windows_dur = duration(space_between_windows)
    assert fire_growth_rate_threshold >= clear_growth_rate_threshold, {
        'fire_growth_rate_threshold': fire_growth_rate_threshold,
        'clear_growth_rate_threshold': clear_growth_rate_threshold,
        'sfui_errorKeys': ['fire_growth_rate_threshold', 'clear_growth_rate_threshold'],
        'sfui_errorTemplate': "{{{fire_growth_rate_threshold}}} must be greater than or equal to {{{clear_growth_rate_threshold}}}."}
    assert space_between_windows_dur >= window_to_compare_dur, {
        'space_between_windows': space_between_windows_dur,
        'window_to_compare': window_to_compare_dur,
        'sfui_errorKeys': ['space_between_windows', 'window_to_compare'],
        'sfui_errorTemplate': "{{{space_between_windows}}} must be greater than or equal to {{{window_to_compare}}}."}
    assert num_windows <= 8, {
        'num_windows': num_windows,
        'sfui_errorKeys': ['num_windows'],
        'sfui_errorTemplate': "{{{num_windows}}} must be less than or equal to 8."}
    summary = stream.mean(over=window_to_compare_dur)
    fb, cb, ct, ft = streams.growth_rate_thresholds(stream, window_to_compare=window_to_compare_dur,
                                                    space_between_windows=space_between_windows_dur,
                                                    num_windows=num_windows,
                                                    fire_growth_rate_threshold=fire_growth_rate_threshold,
                                                    clear_growth_rate_threshold=clear_growth_rate_threshold,
                                                    discard_historical_outliers=discard_historical_outliers)
    annotations = [annotate(summary, 'rolling mean', {'sfui_streamType': 'signal'}),
                   annotate(fb, 'lower fire threshold', {'sfui_streamType': 'threshold',
                                                         'sfui_state': 'fire',
                                                         'sfui_orientation': 'below',
                                                         'sfui_trigger': 'outside',
                                                         'influencedBy': 'fire_growth_rate_threshold'}),
                   annotate(ft, 'upper fire threshold', {'sfui_streamType': 'threshold',
                                                         'sfui_state': 'fire',
                                                         'sfui_orientation': 'above',
                                                         'sfui_trigger': 'outside',
                                                         'influencedBy': 'fire_growth_rate_threshold'}),
                   annotate(cb, 'lower clear threshold',
                            {'sfui_streamType': 'threshold',
                             'sfui_state': 'clear',
                             'sfui_orientation': 'below',
                             'sfui_trigger': 'outside',
                             'influencedBy': 'clear_growth_rate_threshold'}),
                   annotate(ct, 'upper clear threshold',
                            {'sfui_streamType': 'threshold',
                             'sfui_state': 'clear',
                             'sfui_orientation': 'above',
                             'sfui_trigger': 'outside',
                             'influencedBy': 'clear_growth_rate_threshold'})]
    event_annotations = {'current_window': str(window_to_compare_dur)}
    return detector_helper(summary, fb, cb, ct, ft, orientation, annotations, event_annotations, auto_resolve_after=auto_resolve_after)


def detector_mean_std(stream, window_to_compare=duration('15m'),
                      space_between_windows=duration('1w'),
                      num_windows=4, fire_num_stddev=3, clear_num_stddev=2.5,
                      discard_historical_outliers=True, orientation='above',
                      calculation_mode='across', auto_resolve_after=None):
    space_between_windows_dur = duration(space_between_windows)
    window_to_compare_dur = duration(window_to_compare)
    assert num_windows <= RECURSION_LIMIT, {
        'num_windows': num_windows,
        'sfui_errorKeys': ['num_windows'],
        'sfui_errorTemplate': "{{{num_windows}}} must be less than or equal to 8."}
    assert fire_num_stddev >= clear_num_stddev, {'fire_num_stddev': fire_num_stddev,
                                                 'clear_num_stddev': clear_num_stddev,
                                                 'sfui_errorKeys': ['fire_num_stddev',
                                                                    'clear_num_stddev'],
                                                 'sfui_errorTemplate': "{{{fire_num_stddev}}} must be greater than or equal to {{{clear_num_stddev}}}."}
    assert space_between_windows_dur >= window_to_compare_dur, {
        'space_between_windows': space_between_windows_dur,
        'window_to_compare': window_to_compare_dur,
        'sfui_errorKeys': ['space_between_windows', 'window_to_compare'],
        'sfui_errorTemplate': "{{{space_between_windows}}} must be greater than or equal to {{{window_to_compare}}}."}
    summary = stream.mean(over=window_to_compare_dur)
    fb, cb, ct, ft = streams.mean_std_thresholds(stream, window_to_compare=window_to_compare,
                                                 space_between_windows=space_between_windows,
                                                 num_windows=num_windows,
                                                 fire_num_stddev=fire_num_stddev,
                                                 clear_num_stddev=clear_num_stddev,
                                                 discard_historical_outliers=discard_historical_outliers,
                                                 calculation_mode=calculation_mode)
    annotations = [annotate(summary, 'rolling mean', {'sfui_streamType': 'signal'}),
                   annotate(fb, 'lower fire threshold', {'sfui_streamType': 'threshold',
                                                         'sfui_state': 'fire',
                                                         'sfui_orientation': 'below',
                                                         'sfui_trigger': 'outside',
                                                         'influencedBy': 'fire_num_stddev'}),
                   annotate(ft, 'upper fire threshold', {'sfui_streamType': 'threshold',
                                                         'sfui_state': 'fire',
                                                         'sfui_orientation': 'above',
                                                         'sfui_trigger': 'outside',
                                                         'influencedBy': 'fire_num_stddev'}),
                   annotate(cb, 'lower clear threshold',
                            {'sfui_streamType': 'threshold',
                             'sfui_state': 'clear',
                             'sfui_orientation': 'below',
                             'sfui_trigger': 'outside',
                             'influencedBy': 'clear_num_stddev'}),
                   annotate(ct, 'upper clear threshold',
                            {'sfui_streamType': 'threshold',
                             'sfui_state': 'clear',
                             'sfui_orientation': 'above',
                             'sfui_trigger': 'outside',
                             'influencedBy': 'clear_num_stddev'})]
    event_annotations = {'current_window': str(window_to_compare_dur)}
    return detector_helper(summary, fb, cb, ct, ft, orientation, annotations, event_annotations, auto_resolve_after=auto_resolve_after)
