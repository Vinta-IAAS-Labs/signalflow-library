# These functions transform a stream, assumed to be either decreasing or increasing, into an
# estimate of how long it will take (in hours) for the stream to reach 0 (in case decreasing),
# or some user-specified capacity (in case increasing); and facilitate the creation of a
# detector based on how many hours of capacity are left.
#
# @author joe

def hours_left_stream(stream, increment_size=duration('1m'), imputed_value=None):
    # Args:
    #     stream: data stream, assumed to be decreasing and non-negative
    #     *increment_size deprecated but still part of signature; previously
    #           used to estimate rate of change
    #     imputed_value: if a number is provided, use this value when stream.rateofchange() > 0;
    #           otherwise output stream will be null in this case (default=None)
    #
    # Returns:
    #     hours left until stream has value 0, calculated via linear extrapolation; null or imputed value
    #           if stream is increasing
    if imputed_value is None:
        return (stream / (-3600 * stream.rateofchange().below(0)))
    else:
        return (imputed_value if stream.rateofchange() >= 0 else (stream / (-3600 * stream.rateofchange().below(0)))).fill()

def hours_left_stream_incr(stream, maximum_capacity, increment_size=duration('1m'),
                           imputed_value=None):
    # Args:
    #     stream: data stream, assumed to be increasing
    #     maximum_capacity (number): value at which stream is exhausted,
    #         e.g. 100 for disk.summary_utilization
    #     increment_size (duration): interval length used to estimate rate of change
    #         (optional, default=duration('1m'))
    #
    # Returns:
    #     hours left until stream has value maximum_capacity, calculated via linear extrapolation;
    #         is optimistic in that it uses the maximum hours left over the estimation_period
    return hours_left_stream(maximum_capacity - stream, increment_size=increment_size,
                             imputed_value=imputed_value)


def hours_left_stream_detector(stream, minimum_value=0, lower_threshold=24,
                               fire_lasting=lasting('10m', 1.0),
                               clear_threshold=36, clear_lasting=lasting('10m', 1.0),
                               use_double_ewma=False, damping=1.0, increment_size=duration('1m')):
    # Args:
    #     stream: data stream, assumed to be decreasing
    #     minimum_value (number): value at which stream is considered empty (optional, default=0)
    #     lower_threshold (number):  threshold for firing (number of hours) (optional, default=24)
    #     fire_lasting (lasting): lasting object associated with lower_threshold;
    #         note the estimation_period serves as a quasi-duration argument
    #         (optional, default=lasting('10m', 1.0))
    #     clear_threshold (number): threshold for clearing (number of hours) (optional, default=36);
    #         using a clear_threshold larger than lower_threshold should reduce flappiness
    #     clear_lasting (lasting): lasting object associated with clear threshold (optional,
    #         default=lasting('10m', 1.0))
    #     use_double_ewma (boolean): whether to use double_ewma (if False, use linear extrapolation)
    #     damping (number): damping factor to use (only relevant if use_double_ewma=True), default=1.0
    #     increment_size (duration) * deprecated* : interval length used to estimate rate of change
    #         (optional, default=duration('1m'))
    # Returns:
    #     detect block which fires when stream is estimated to "run out" (i.e., have value 0) within
    #         lower_threshold hours (for fire_lasting); clears when stream is estimated not to be
    #         exhausted for at least clear_threshold hours (for clear_lasting)
    assert lower_threshold <= clear_threshold, {'lower_threshold': lower_threshold,
                                                'clear_threshold': clear_threshold,
                                                'sfui_errorKeys': ['lower_threshold',
                                                                   'clear_threshold'],
                                                'sfui_errorTemplate': "{{{lower_threshold}}} must be less than or equal to {{{clear_threshold}}}."}
    if use_double_ewma:
        return hours_left_stream_dewma_detector(stream, stream_threshold=minimum_value,
                                     orientation='to_empty',
                                     lower_threshold=lower_threshold * duration('1h'),
                                     fire_lasting=fire_lasting,
                                     clear_threshold=clear_threshold * duration('1h'),
                                     clear_lasting=clear_lasting,
                                     damping=damping,
                                     use_durations=True)
    else:
        diff = stream - minimum_value
        hours_left = hours_left_stream(diff, increment_size=increment_size,
                                       imputed_value=clear_threshold + 1)
        lower_threshold_signal = const(lower_threshold)
        clear_threshold_signal = const(clear_threshold)
        annotations = [annotate(hours_left, 'hours left', {'sfui_streamType': 'signal', 'influencedBy':
            'increment_size'}),
                       annotate(lower_threshold_signal, 'lower fire threshold',
                                {'sfui_streamType': 'threshold',
                                 'sfui_state': 'fire',
                                 'sfui_orientation': 'below',
                                 'sfui_trigger': 'outside'}),
                       annotate(clear_threshold_signal, 'lower clear threshold',
                                {'sfui_streamType': 'threshold',
                                 'sfui_state': 'clear',
                                 'sfui_orientation': 'above',
                                 'sfui_trigger': 'outside'})
                       ]
        return detect(when(hours_left < lower_threshold_signal, fire_lasting),
                      when(hours_left > clear_threshold_signal, clear_lasting),
                      mode='split',
                      annotations=annotations)


def hours_left_stream_incr_detector(stream, maximum_capacity, lower_threshold=24,
                                    fire_lasting=lasting('10m', 1.0),
                                    clear_threshold=36, clear_lasting=lasting('10m', 1.0),
                                    use_double_ewma=False,
                                    damping=1.0,
                                    increment_size=duration('1m')):
    # Args:
    #     stream: data stream, assumed to be increasing
    #     maximum_capacity (number): value at which stream is exhausted,
    #         e.g. 100 for disk.summary_utilization
    #     lower_threshold (number):  threshold for firing (number of hours) (optional, default=24)
    #     fire_lasting (lasting): lasting object associated with lower_threshold;
    #         note the estimation_period serves as a quasi-duration argument
    #         (optional, default=lasting('10m', 1.0))
    #     clear_threshold (number): threshold for clearing (number of hours) (optional, default=36);
    #         using a clear_threshold larger than lower_threshold should reduce flappiness
    #     clear_lasting (lasting): lasting object associated with clear threshold (optional,
    #         default=lasting('10m', 1.0))
    #     damping (number): damping factor to use (only relevant if use_double_ewma=True), default=1.0
    #     increment_size (duration): interval length used to estimate rate of change
    #         (optional, default=duration('1m'))
    # Returns:
    #     detect block which fires when stream is estimated to "run out" (i.e., hit
    #         maximum_capacity) within lower_threshold hours (for fire_lasting);
    #         clears when stream is estimated to have at least clear_threshold hours left
    #         (for clear_lasting)
    if use_double_ewma:
        return hours_left_stream_dewma_detector(stream, stream_threshold=maximum_capacity,
                                     orientation='to_capacity',
                                     lower_threshold=lower_threshold * duration('1h'),
                                     fire_lasting=fire_lasting,
                                     clear_threshold=clear_threshold * duration('1h'),
                                     clear_lasting=clear_lasting,
                                     damping=damping,
                                     use_durations=True)
    else:
        diff = maximum_capacity - stream
        return hours_left_stream_detector(diff,
                                      lower_threshold=lower_threshold, fire_lasting=fire_lasting,
                                      clear_threshold=clear_threshold,
                                      clear_lasting=clear_lasting,
                                      increment_size=increment_size)


def hours_left_stream_dewma_detector(stream, stream_threshold=0,
                                     orientation='to_empty',
                                     lower_threshold=duration('24h'),
                                     fire_lasting=lasting('10m', 1.0),
                                     clear_threshold=duration('36h'),
                                     clear_lasting=lasting('10m', 1.0),
                                     alpha=0.1, beta=0.1, damping=1.0,
                                     use_durations=False):
    # Args:
    #     stream: data stream, assumed to be decreasing
    #     stream_threshold (number): value at which stream is considered empty or full (optional, default=0)
    #     orientation (string): monitor when stream is projected to go below (option
    #         'to_empty') or above (option 'to_capacity') stream_threshold (optional, default='to_empty',
    #         one of 'to_empty', 'to_capacity')
    #     lower_threshold (duration):  threshold for firing (number of hours) (optional, default=24)
    #     fire_lasting (lasting): lasting object associated with lower_threshold;
    #         note the estimation_period serves as a quasi-duration argument
    #         (optional, default=lasting('10m', 1.0))
    #     clear_threshold (duration): threshold for clearing (number of hours) (optional, default=36);
    #         using a clear_threshold larger than lower_threshold should reduce flappiness
    #     clear_lasting (lasting): lasting object associated with clear threshold (optional,
    #         default=lasting('10m', 1.0))
    #     alpha (number): double exponential smoothing parameter (level)
    #     beta (number): double exponential smoothing parameter (trend)
    #     damping (number): double exponential smoothing parameter (damping factor)
    # Returns:
    #     detect block which fires when stream is estimated to "run out" (i.e., have value 0) within
    #         lower_threshold hours (for fire_lasting); clears when stream is estimated not to be
    #         exhausted for at least clear_threshold hours (for clear_lasting)
    assert lower_threshold <= clear_threshold, {'lower_threshold': lower_threshold,
                                                'clear_threshold': clear_threshold,
                                                'sfui_errorKeys': ['lower_threshold',
                                                                   'clear_threshold'],
                                                'sfui_errorTemplate': "{{{lower_threshold}}} must be less than or equal to {{{clear_threshold}}}."}
    if use_durations:
        d1, d2 = fire_lasting.duration, clear_lasting.duration
        double_ewma_param = 5 * (d1 if d1 > d2 else d2)
        fire_forecast = stream.double_ewma(over=double_ewma_param, forecast=lower_threshold, damping=damping)
        clear_forecast = stream.double_ewma(over=double_ewma_param, forecast=clear_threshold, damping=damping)
    else:
        fire_forecast = stream.double_ewma(alpha, beta, forecast=lower_threshold, damping=damping)
        clear_forecast = stream.double_ewma(alpha, beta, forecast=clear_threshold, damping=damping)
    threshold_signal_below = const(stream_threshold)
    threshold_signal_above = const(stream_threshold)
    def fire_clear_pair(orient):
        if orient == 'to_empty':
            return 'fire', 'clear'
        elif orient == 'to_capacity':
            return 'clear', 'fire'
    annotations = [annotate(fire_forecast, 'trigger forecast', {'sfui_streamType': 'signal'}),
                   annotate(clear_forecast, 'clear forecast', {'sfui_streamType': 'signal'}),
                   annotate(threshold_signal_below, 'stream threshold',
                            {'sfui_streamType': 'threshold',
                             'sfui_state': fire_clear_pair(orientation)[0],
                             'sfui_orientation': 'below',
                             'sfui_trigger': 'outside'}),
                   annotate(threshold_signal_above, 'stream threshold',
                            {'sfui_streamType': 'threshold',
                             'sfui_state': fire_clear_pair(orientation)[1],
                             'sfui_orientation': 'above',
                             'sfui_trigger': 'outside'})]
    if orientation == 'to_empty':
        return detect(when(fire_forecast < threshold_signal_below, fire_lasting),
                      when(clear_forecast > threshold_signal_above, clear_lasting),
                      mode='split', annotations=annotations)
    elif orientation == 'to_capacity':
        return detect(when(fire_forecast > threshold_signal_above, fire_lasting),
                      when(clear_forecast < threshold_signal_below, clear_lasting),
                      mode='split', annotations=annotations)

# examples
# hours_left_stream(100 - data('disk.summary_utilization')).publish('b')


# hours_left_stream_detector(100 - data('disk.summary_utilization'),
#                            fire_lasting=lasting('5m', 1.0)).publish('a')


# hours_left_stream_detector(100 - data('disk.summary_utilization'),
#                            clear_threshold=36, clear_lasting=lasting('5m', 0.95)).publish('c')


# hours_left_stream_incr_detector(data('disk.summary_utilization'),
#                            100, clear_threshold=48).publish('d')
