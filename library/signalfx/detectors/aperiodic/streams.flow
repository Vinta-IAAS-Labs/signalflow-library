def numerator_stream(stream, threshold_1, threshold_2, orientation, strict_1=True, strict_2=True):
    # Args:
    #       stream (stream): data stream
    #       threshold_1 (number or data stream): lower threshold of range
    #       threshold_2 (number or data stream): upper threshold of range
    #       orientation (string): one of 'above', 'below', 'within_range', 'out_of_band'
    #       strict_1 (boolean): whether inequalities involving threshold_1 should
    #               be strict (optional, default=True)
    #       strict_2 (boolean): whether inequalities involving threshold_2 should
    #               be strict (optional, default=True)
    # Returns:
    #       stream which is 1 when the specified condition is true and None otherwise
    if orientation == 'above':
        if strict_2 is True:
            return (1 if stream > threshold_2 else None)
        elif strict_2 is False:
            return (1 if stream >= threshold_2 else None)
    elif orientation == 'below':
        if strict_1 is True:
            return (1 if stream < threshold_1 else None)
        elif strict_1 is False:
            return (1 if stream <= threshold_1 else None)
    elif orientation == 'within_range':
        if strict_1 is True and strict_2 is True:
            return (1 if stream > threshold_1 and stream < threshold_2 else None)
        elif strict_1 is True and strict_2 is False:
            return (1 if stream > threshold_1 and stream <= threshold_2 else None)
        elif strict_1 is False and strict_2 is True:
            return (1 if stream >= threshold_1 and stream < threshold_2 else None)
        elif strict_1 is False and strict_2 is False:
            return (1 if stream >= threshold_1 and stream <= threshold_2 else None)
    elif orientation == 'out_of_band':
        if strict_1 is True and strict_2 is True:
            return (1 if stream < threshold_1 or stream > threshold_2 else None)
        elif strict_1 is True and strict_2 is False:
            return (1 if stream < threshold_1 or stream >= threshold_2 else None)
        elif strict_1 is False and strict_2 is True:
            return (1 if stream <= threshold_1 or stream > threshold_2 else None)
        elif strict_1 is False and strict_2 is False:
            return (1 if stream <= threshold_1 or stream >= threshold_2 else None)


def denominator_stream(stream, threshold_1, threshold_2, orientation):
    # Args:
    #       stream (stream): data stream
    #       threshold_1 (number or data stream): lower threshold of range
    #       threshold_2 (number or data stream): upper threshold of range
    #       orientation (string): one of 'above', 'below', 'within_range', 'out_of_band'
    # Returns:
    #       stream which is 1 when the quantities compared in the specified condition are not None
    #               and None otherwise
    if orientation == 'above':
        return (1 if stream is not None and threshold_2 is not None else None)
    elif orientation == 'below':
        return (1 if stream is not None and threshold_1 is not None else None)
    elif orientation == 'within_range':
        return (1 if stream is not None and threshold_1 is not None and threshold_2 is not None else None)
    elif orientation == 'out_of_band':
        either_threshold = (1 if threshold_1 is not None or threshold_2 is not None else None)
        return (1 if stream is not None and either_threshold is not None else None)


def compare_streams_ignoring_nulls(stream1, stream2, lasting):
    # returns a stream for which a positive value corresponds to the condition
    #    "stream1 > stream2 for lasting",
    #    ignoring missing values
    # works around the problem of detectors not firing due to one missed point;
    #    leads to better detectors for aperiodic data
    return (stream1 - stream2).percentile(100 * (1.0 - lasting.at_least), over=lasting.duration)
