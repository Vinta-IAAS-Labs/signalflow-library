# These functions create detectors which are insensitive to missing values and irregular arrival
# patterns. The key insight is that, since percentile calculations do not involve nulls,
# "A > 7 for 80% of 10 minutes" is equivalent to
# "the 10-minute 20th percentile of A is greater than 7."
#
# @author joe

from signalfx.detectors.aperiodic import utils
from signalfx.detectors.aperiodic import streams
from signalfx.detectors.aperiodic import conditions

def generic_detector(stream, threshold_1, threshold_2, orientation, observed_lasting,
                            expected_lasting=None, annotations=None, event_annotations=None):
    # Args:
    #       stream (stream): data stream
    #       threshold_1 (number or data stream):
    #       threshold_2
    #       orientation (string): one of 'above', 'below', 'within_range', 'out_of_band'
    #       observed_lasting (lasting):
    #       expected_lasting (lasting): (optional, default=None)
    #       annotations (dict): (optional, default=None)
    #       event_annotations (dict): (optional, default=None)
    # Returns:
    #       detect block
    if expected_lasting is None:
        return detect(conditions.generic_condition(stream, threshold_1, threshold_2, orientation, observed_lasting,
                                        denominator_mode='observed'), annotations=annotations,
                                        event_annotations=event_annotations)
    else:
        return detect(conditions.generic_condition(stream, threshold_1, threshold_2, orientation, observed_lasting,
                                        denominator_mode='observed') and conditions.generic_condition(stream, threshold_1, threshold_2,
                                                                               orientation, expected_lasting,
                                                                               denominator_mode='expected'),
                      annotations=annotations, event_annotations=event_annotations)


def above_or_below_detector(stream, threshold, orientation, observed_lasting,
                            expected_lasting=None, annotations=None, event_annotations=None):
    # fires when (stream > (or <) threshold is true in observed_lasting.duration) / (observed data points in
    #    observed.duration) is larger than observed_lasting.at least, and (stream > (or <) threshold is
    #    true in expected_lasting.duration) / (expected data points in expected_lasting.duration)
    #    is larger than expected_lasting.at_least
    # Args:
    #       stream (stream): data stream
    #       threshold (number or data stream):
    #       orientation (string): one of 'above', 'below'
    #       observed_lasting (lasting):
    #       expected_lasting (lasting): (optional, default=None)
    #       annotations (dict): (optional, default=None)
    #       event_annotations (dict): (optional, default=None)
    # Returns:
    #       detect block
    return generic_detector(stream, threshold, threshold, orientation, observed_lasting,
                            expected_lasting=expected_lasting, annotations=annotations, event_annotations=event_annotations)


def range_detector(stream, lower_threshold, upper_threshold, orientation, observed_lasting,
                            expected_lasting=None, annotations=None, event_annotations=None):
    # fires when (range condition is true in observed_lasting.duration) / (observed data points in
    #    observed.duration) is larger than observed_lasting.at least, and (range condition is
    #    true in expected_lasting.duration) / (expected data points in expected_lasting.duration)
    #    is larger than expected_lasting.at_least
    #       stream (stream): data stream
    #       lower_threshold (number or data stream):
    #       upper_threshold (number or data stream):
    #       orientation (string): one of 'within_range', 'out_of_band'
    #       observed_lasting (lasting):
    #       expected_lasting (lasting): (optional, default=None)
    #       annotations (dict): (optional, default=None)
    #       event_annotations (dict): (optional, default=None)
    # Returns:
    #       detect block
    return generic_detector(stream, lower_threshold, upper_threshold, orientation, observed_lasting,
                            expected_lasting=expected_lasting, annotations=annotations, event_annotations=event_annotations)


def generic_detector_with_clear(stream, fire_threshold_1, fire_threshold_2, fire_orientation,
                                fire_observed_lasting, clear_threshold_1, clear_threshold_2, clear_orientation,
                                clear_observed_lasting, fire_expected_lasting=None, clear_expected_lasting=None,
                                mode='paired', annotations=None, event_annotations=None):
    # Args:
    #       stream (stream): data stream
    #       fire_threshold_1 (number or data stream):
    #       fire_threshold_2
    #       fire_orientation (string): one of 'above', 'below', 'within_range', 'out_of_band'
    #       fire_observed_lasting (lasting):
    #       clear_threshold_1 (number or data stream):
    #       clear_threshold_2
    #       clear_orientation (string): one of 'above', 'below', 'within_range', 'out_of_band'
    #       clear_observed_lasting (lasting):
    #       fire_expected_lasting (lasting): (optional, default=None)
    #       clear_expected_lasting (lasting): (optional, default=None)
    #       mode (string): one of 'split', 'paired'
    #       annotations (dict): (optional, default=None)
    #       event_annotations (dict): (optional, default=None)
    # Returns:
    #       detect block
    if fire_expected_lasting is None:
        fire_condition = conditions.generic_condition(stream, fire_threshold_1, fire_threshold_2, fire_orientation,
                                           fire_observed_lasting, denominator_mode='observed')
    else:
        fire_condition = conditions.generic_condition(stream, fire_threshold_1, fire_threshold_2, fire_orientation,
                                           fire_observed_lasting, denominator_mode='observed') and conditions.generic_condition(stream, fire_threshold_1, fire_threshold_2, fire_orientation,
                                           fire_expected_lasting, denominator_mode='expected')
    if clear_expected_lasting is None:
        clear_condition = conditions.generic_condition(stream, clear_threshold_1, clear_threshold_2, clear_orientation,
                                           clear_observed_lasting, denominator_mode='observed')
    else:
        clear_condition = conditions.generic_condition(stream, clear_threshold_1, clear_threshold_2, clear_orientation,
                                           clear_observed_lasting, denominator_mode='observed') and conditions.generic_condition(stream, clear_threshold_1, clear_threshold_2, clear_orientation,
                                           clear_expected_lasting, denominator_mode='expected')
    return detect(fire_condition, off=clear_condition, mode=mode, annotations=annotations, event_annotations=event_annotations)


def above_or_below_detector_with_clear(stream, fire_threshold, fire_observed_lasting,
                                        clear_threshold, clear_observed_lasting, orientation,
                                        fire_expected_lasting=None, clear_expected_lasting=None, mode='paired',
                                        annotations=None, event_annotations=None):
    # Args:
    #       stream (stream): data stream
    #       fire_threshold (number or data stream):
    #       fire_observed_lasting (lasting):
    #       clear_threshold (number or data stream):
    #       clear_observed_lasting (lasting):
    #       orientation (string): one of 'above', 'below'
    #       fire_expected_lasting (lasting): (optional, default=None)
    #       clear_expected_lasting (lasting): (optional, default=None)
    #       mode (string): one of 'split', 'paired' (optional, default='paired')
    #       annotations (dict): (optional, default=None)
    #       event_annotations (dict): (optional, default=None)
    # Returns:
    #       detect block
    return generic_detector_with_clear(stream, fire_threshold, fire_threshold, orientation, fire_observed_lasting,
                                        clear_threshold, clear_threshold, utils.opposite_orientation(orientation),
                                        clear_observed_lasting, fire_expected_lasting=fire_expected_lasting,
                                        clear_expected_lasting=clear_expected_lasting, mode=mode,
                                        annotations=annotations, event_annotations=event_annotations)


def range_detector_with_clear(stream, fire_lower_threshold, fire_upper_threshold, fire_observed_lasting,
                                clear_lower_threshold, clear_upper_threshold, clear_observed_lasting,
                                orientation, fire_expected_lasting=None, clear_expected_lasting=None,
                                mode='paired', annotations=None, event_annotations=None):
    # Args:
    #       stream (stream): data stream
    #       fire_lower_threshold (number or data stream):
    #       fire_upper_threshold (number or data stream):
    #       fire_observed_lasting (lasting):
    #       clear_lower_threshold (number or data stream):
    #       clear_upper_threshold (number or data stream):
    #       clear_observed_lasting (lasting):
    #       orientation (string): one of 'within_range', 'out_of_band'
    #       fire_expected_lasting (lasting): (optional, default=None)
    #       clear_expected_lasting (lasting): (optional, default=None)
    #       mode (string): one of 'split', 'paired' (optional, default='paired')
    #       annotations (dict): (optional, default=None)
    #       event_annotations (dict): (optional, default=None)
    # Returns:
    #       detect block
    return generic_detector_with_clear(stream, fire_lower_threshold, fire_upper_threshold, orientation,
                                       fire_observed_lasting, clear_lower_threshold, clear_upper_threshold,
                                       utils.opposite_orientation(orientation), clear_observed_lasting,
                                       fire_expected_lasting=fire_expected_lasting,
                                       clear_expected_lasting=clear_expected_lasting,
                                       mode=mode, annotations=annotations, event_annotations=event_annotations)



def one_sided_detector(stream1, stream2, lasting):
    # detects when "stream1 > stream2 for lasting", ignoring missing values
    return detect(when(streams.compare_streams_ignoring_nulls(stream1, stream2, lasting) > 0))


def generic_one_sided_detector_with_clear(fire_stream1, fire_stream2, fire_lasting, clear_stream1,
                                          clear_stream2, clear_lasting):
    # detects when "fire_stream1 > fire_stream2 for fire_lasting",
    # clears when "clear_stream1 > clear_stream2 for clear_lasting",
    # both ignoring missing values
    return detect(
        when(streams.compare_streams_ignoring_nulls(fire_stream1, fire_stream2, fire_lasting) > 0),
        when(streams.compare_streams_ignoring_nulls(clear_stream1, clear_stream2, clear_lasting) > 0))


def one_sided_detector_with_clear(stream, fire_threshold, fire_lasting, clear_threshold,
                                  clear_lasting):
    # fires when "stream > fire_threshold for fire_lasting",
    # clears when "stream < clear_threshold for clear_lasting",
    # both ignoring missing values
    return generic_one_sided_detector_with_clear(stream, fire_threshold, fire_lasting,
                                                 clear_threshold, stream, clear_lasting)


def two_sided_detector(stream, upper_stream, lower_stream, lasting):
    # detects when "stream > upper_stream OR stream < lower_stream for lasting",
    # ignoring missing values
    upper_indicator = utils.indicator(stream, upper_stream)
    lower_indicator = utils.indicator(lower_stream, stream)
    either_indicator = upper_indicator + lower_indicator  # 2 if both conditions, 0 if one, -2 if neither
    return one_sided_detector(either_indicator, -1, lasting)


def two_sided_detector_with_clear(stream, fire_upper_stream, fire_lower_stream, fire_lasting,
                                  clear_upper_stream, clear_lower_stream, clear_lasting):
    # detects when "stream > fire_upper_stream OR stream < fire_lower_stream for fire_lasting",
    # clears when "stream < clear_upper_stream AND stream > clear_lower_stream for clear_lasting",
    # ignoring missing values
    fire_indicator = utils.indicator(stream, fire_upper_stream) + utils.indicator(fire_lower_stream,
                                                                      stream)  # 2 if both conditions, 0 if one, -2 if neither
    clear_indicator = utils.indicator(clear_upper_stream, stream) + utils.indicator(stream,
                                                                        clear_lower_stream)  # 2 if both conditions, 0 if one, -2 if neither
    return generic_one_sided_detector_with_clear(fire_indicator, -1, fire_lasting, clear_indicator,
                                                 1, clear_lasting)



opposite_orientation = utils.opposite_orientation
numerator_stream = streams.numerator_stream
denominator_stream = streams.denominator_stream
generic_condition = conditions.generic_condition
compare_streams_ignoring_nulls = streams.compare_streams_ignoring_nulls
indicator = utils.indicator
percentage_above_threshold = utils.percentage_above_threshold