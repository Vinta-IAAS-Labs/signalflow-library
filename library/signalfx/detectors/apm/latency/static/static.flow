from signalfx.detectors.apm.latency import conditions


def detector(fire_threshold=None, fire_lasting=None, clear_threshold=None, clear_lasting=None,
             pctile=90, filter_=None, exclude_errors=True, group_by=None, volume_static_threshold=None,
             volume_pct_threshold=None, volume_nonzero_required=0.1, use_ms=True):
    # Detect when latency exceeds a specified static threshold for a specified percent of duration
    # :param fire_threshold (number): latency threshold required to trigger, expressed in
    #                   nanoseconds or milliseconds (see use_ms)
    # :param fire_lasting (lasting): percent of duration associated with fire_threshold
    # :param clear_threshold: latency threshold required to clear, expressed in, expressed in
    #                   nanoseconds or milliseconds (see use_ms)
    # :param clear_lasting (lasting): percent of duration associated with clear_threshold
    # :param pctile (number): percentile to monitor, one of 50, 90, 99, default=90
    # :param filter_ (filter): specifies dimensional scope of the detector, default=None
    # :param exclude_errors (boolean): whether to exclude error spans from latency metric, default=True
    # :param group_by (list of strings): average latency by these (in addition to default grouping
    #                    by cluster, service, operation), default=None
    # :param volume_static_threshold (number): threshold on request rate (per second) required for
    #                    alert to trigger, default=None FIXME?
    # :param volume_pct_threshold (number): require request rate on window being evaluated to be
    #                    at least this proportion of request rate on preceding window (used for
    #                    trigger and clear), default=None FIXME?
    # :param volume_nonzero_required (number between 0 and 1): require request rate to be nonzero
    #                    for this proportion of fire_lasting.duration (used for trigger and clear),
    #                     default=0.1
    # :param use_ms (boolean): if True, use milliseconds; else use nanoseconds (see fire_threshold and clear_threshold)
    # :return: detect block that triggers when the specified percentile of latency, suitably
    #           filtered and grouped, exceeds the specified threshold for the required percent
    #           of duration; clears when latency remains below the specified clear threshold
    #           for the required percent of duration
    assert fire_threshold >= clear_threshold, {
        'fire_threshold': fire_threshold, 'clear_threshold': clear_threshold,
        'sfui_errorKeys': ['fire_threshold', 'clear_threshold'],
        'sfui_errorTemplate': "{{{fire_threshold}}} must be greater than or equal to {{{clear_threshold}}}."}
    assert pctile == 50 or pctile == 90 or pctile == 99, {
        'pctile': pctile,
        'sfui_errorKeys': ['pctile'],
        'sfui_errorTemplate': "{{{pctile}}} must be one of 50, 90, 99."}
    conds = conditions.static(fire_threshold=fire_threshold,
                              fire_lasting=fire_lasting,
                              clear_threshold=clear_threshold,
                              clear_lasting=clear_lasting,
                              pctile=pctile, filter_=filter_, exclude_errors=exclude_errors,
                              group_by=group_by, use_ms=use_ms)
    non_empty_cond = conditions.static_volume_nonempty(lasting(fire_lasting.duration,
                                                               volume_nonzero_required),
                                                       filter_=filter_,
                                                       exclude_errors=exclude_errors,
                                                       group_by=group_by)
    if volume_static_threshold is not None and volume_pct_threshold is not None:
        static = conditions.static_on_volume(fire_lasting.duration,
                                             volume_static_threshold, filter_=filter_,
                                             exclude_errors=exclude_errors,
                                             group_by=group_by)
        pct = conditions.volume_sc(filter_=filter_, current_window=fire_lasting.duration,
                                   historical_window=5 * fire_lasting.duration,
                                   fire_threshold=volume_pct_threshold,
                                   clear_threshold=volume_pct_threshold,
                                   exclude_errors=exclude_errors,
                                   group_by=group_by)['on']
        on = conds['on'] and static and pct and non_empty_cond
    elif volume_static_threshold is not None:
        static = conditions.static_on_volume(fire_lasting.duration,
                                             volume_static_threshold, filter_=filter_,
                                             exclude_errors=exclude_errors,
                                             group_by=group_by)
        on = conds['on'] and static and non_empty_cond
    elif volume_pct_threshold is not None:
        pct = conditions.volume_sc(filter_=filter_, current_window=fire_lasting.duration,
                                   historical_window=5 * fire_lasting.duration,
                                   fire_threshold=volume_pct_threshold,
                                   clear_threshold=volume_pct_threshold,
                                   exclude_errors=exclude_errors,
                                   group_by=group_by)['on']
        on = conds['on'] and pct and non_empty_cond
    else:
        on = conds['on'] and non_empty_cond
    if clear_threshold is not None:
        return detect(on, off=conds['off'] and non_empty_cond, annotations=conds['annotations'],
                      event_annotations=conds['event_annotations'])
    else:
        return detect(on, annotations=conds['annotations'],
                      event_annotations=conds['event_annotations'])
