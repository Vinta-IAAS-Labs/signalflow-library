from signalfx.detectors.apm import utils
from signalfx.detectors.apm.latency import streams


def static(fire_threshold=None, fire_lasting=None, clear_threshold=None, clear_lasting=None,
           pctile=90, filter_=None, exclude_errors=True, group_by=None):
    d = streams.pctile_over_window(pctile=pctile, filter_=filter_, window=None,
                                   exclude_errors=exclude_errors, group_by=group_by)
    ann = [annotate(d, 'latency', {'sfui_streamType': 'signal'})]
    event_ann = {
        'fire_threshold': str(fire_threshold),
        'clear_threshold': str(clear_threshold)}
    if clear_threshold is not None:
        return {'on': when(d > fire_threshold, fire_lasting),
                'off': when(d < clear_threshold, clear_lasting),
                'annotations': ann,
                'event_annotations': event_ann}
    else:
        return {'on': when(d > fire_threshold, fire_lasting),
                'annotations': ann,
                'event_annotations': event_ann}


def static_on_volume(duration_, threshold, filter_=None, exclude_errors=True):
    return when(
        streams.volume(filter_=filter_, window=duration(duration_),
                       exclude_errors=exclude_errors) > threshold)


def growth_rate_sc(pctile=90, filter_=None, current_window=duration('5m'),
                   historical_window=duration('1h'),
                   fire_growth_rate_threshold=0.2, clear_growth_rate_threshold=0.1,
                   exclude_errors=True):
    current_window_ = duration(current_window)
    historical_window_ = duration(historical_window)
    curr = streams.pctile_over_window(pctile=pctile, filter_=filter_, window=current_window_)
    t = streams.growth_rate_thresholds_sc(pctile=pctile, filter_=filter_,
                                          current_window=current_window_,
                                          historical_window=historical_window_,
                                          fire_growth_rate_threshold=fire_growth_rate_threshold,
                                          clear_growth_rate_threshold=clear_growth_rate_threshold,
                                          exclude_errors=exclude_errors)
    f_t, c_t = t['fire_threshold'], t['clear_threshold']
    ann = [annotate(curr, 'current window', {'sfui_streamType': 'signal'}),
           annotate(f_t, 'fire threshold', {'sfui_streamType': 'threshold',
                                            'sfui_state': 'fire',
                                            'sfui_orientation': 'above'}),
           annotate(c_t, 'clear threshold', {'sfui_streamType': 'threshold',
                                             'sfui_state': 'clear',
                                             'sfui_orientation': 'above'})]
    event_ann = {'percentile': str(pctile),
                 'current_window': str(current_window_),
                 'historical_window': str(historical_window_),
                 'fire_growth_rate_threshold': str(fire_growth_rate_threshold),
                 'clear_growth_rate_threshold': str(clear_growth_rate_threshold)}
    return {'on': when(curr > f_t),
            'off': when(curr < c_t),
            'annotations': ann,
            'event_annotations': event_ann}


def growth_rate_ha(pctile=90, filter_=None, current_window=duration('5m'),
                   historical_window=duration('1h'),
                   cycle_length=duration('1w'),
                   num_cycles=4,
                   fire_growth_rate_threshold=0.2, clear_growth_rate_threshold=0.1,
                   exclude_errors=True):
    current_window_ = duration(current_window)
    historical_window_ = duration(historical_window)
    cycle_length_ = duration(cycle_length)
    curr = streams.pctile_over_window(pctile=pctile, filter_=filter_, window=current_window_)
    t = streams.growth_rate_thresholds_ha(pctile=pctile, filter_=filter_,
                                          historical_window=historical_window_,
                                          cycle_length=cycle_length_,
                                          num_cycles=num_cycles,
                                          fire_growth_rate_threshold=fire_growth_rate_threshold,
                                          clear_growth_rate_threshold=clear_growth_rate_threshold,
                                          exclude_errors=exclude_errors)
    f_t, c_t = t['fire_threshold'], t['clear_threshold']
    ann = [annotate(curr, 'current window', {'sfui_streamType': 'signal'}),
           annotate(f_t, 'fire threshold', {'sfui_streamType': 'threshold',
                                            'sfui_state': 'fire',
                                            'sfui_orientation': 'above'}),
           annotate(c_t, 'clear threshold', {'sfui_streamType': 'threshold',
                                             'sfui_state': 'clear',
                                             'sfui_orientation': 'above'})]
    event_ann = {'percentile': str(pctile),
                 'current_window': str(current_window_),
                 'historical_window': str(historical_window_),
                 'cycle_length': str(cycle_length_),
                 'num_cycles': str(num_cycles),
                 'fire_growth_rate_threshold': str(fire_growth_rate_threshold),
                 'clear_growth_rate_threshold': str(clear_growth_rate_threshold)}
    return {'on': when(curr > f_t),
            'off': when(curr < c_t),
            'annotations': ann,
            'event_annotations': event_ann}


def deviations_from_norm_sc(filter_=None, current_window=duration('5m'),
                            historical_window=duration('1h'), exclude_errors=True,
                            fire_num_dev_threshold=3.5, clear_num_dev_threshold=3):
    current_window_ = duration(current_window)
    historical_window_ = duration(historical_window)
    score = streams.deviations_from_norm_sc(filter_=filter_, current_window=current_window_,
                                            historical_window=historical_window_,
                                            exclude_errors=exclude_errors)
    ann = [annotate(score, 'score')]
    event_ann = {'current_window': str(current_window_),
                 'historical_window': str(historical_window_),
                 'fire_num_dev_threshold': str(fire_num_dev_threshold),
                 'clear_num_dev_threshold': str(clear_num_dev_threshold)}
    return {'on': when(score > fire_num_dev_threshold),
            'off': when(score < clear_num_dev_threshold),
            'annotations': ann,
            'event_annotations': event_ann}


def deviations_from_norm_ha(filter_=None, current_window=duration('5m'),
                            historical_window=duration('1h'),
                            cycle_length=duration('1w'),
                            num_cycles=4, exclude_errors=True,
                            fire_num_dev_threshold=3.5, clear_num_dev_threshold=3):
    current_window_ = duration(current_window)
    historical_window_ = duration(historical_window)
    cycle_length_ = duration(cycle_length)
    score = streams.deviations_from_norm_ha(filter_=filter_, current_window=current_window_,
                                            historical_window=historical_window_,
                                            cycle_length=cycle_length_,
                                            num_cycles=num_cycles,
                                            exclude_errors=exclude_errors)
    ann = [annotate(score, 'score')]
    event_ann = {'current_window': str(current_window_),
                 'historical_window': str(historical_window_),
                 'cycle_length': str(cycle_length_),
                 'num_cycles': str(num_cycles),
                 'fire_num_dev_threshold': str(fire_num_dev_threshold),
                 'clear_num_dev_threshold': str(clear_num_dev_threshold)}
    return {'on': when(score > fire_num_dev_threshold),
            'off': when(score < clear_num_dev_threshold),
            'annotations': ann,
            'event_annotations': event_ann}


def volume_sc(filter_=None, current_window=duration('5m'), historical_window=duration('1h'),
              fire_drop=0.5, clear_drop=0.6, exclude_errors=True):
    v = streams.volumes_sc(filter_=filter_, current_window=duration(current_window),
                           historical_window=duration(historical_window),
                           exclude_errors=exclude_errors)
    c, h = v['current'], v['historical']
    return {'on': when(c < (1 - fire_drop) * h),
            'off': when(c > (1 - clear_drop) * h)}


def volume_ha(filter_=None, current_window=duration('5m'), historical_window=duration('1h'),
              cycle_length=duration('1w'), num_cycles=4, fire_drop=0.5, clear_drop=0.6,
              exclude_errors=True):
    v = streams.volumes_ha(filter_=filter_, current_window=duration(current_window),
                           historical_window=duration(historical_window),
                           cycle_length=duration(cycle_length), num_cycles=num_cycles,
                           exclude_errors=exclude_errors)
    c, h = v['current'], v['historical']
    return {'on': when(c < (1 - fire_drop) * h),
            'off': when(c > (1 - clear_drop) * h)}
