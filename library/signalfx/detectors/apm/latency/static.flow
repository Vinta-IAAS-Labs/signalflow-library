from signalfx.detectors.apm.latency import conditions


def detector(fire_duration, fire_threshold, clear_duration, clear_threshold, filter_, pctile=90,
             exclude_errors=False, volume_static_threshold=None, volume_pct_threshold=None):
    """

    :param fire_duration:
    :param fire_threshold:
    :param clear_duration:
    :param clear_threshold:
    :param filter_:
    :param pctile:
    :param exclude_errors:
    :param volume_static_threshold: on rate! (only for firing)
    :param volume_pct_threshold: (only for firing){{
    :return:
    """
    conds = conditions.static(fire_duration, fire_threshold, clear_duration, clear_threshold,
                              filter_, pctile=pctile, exclude_errors=exclude_errors)
    if volume_static_threshold is not None and volume_pct_threshold is not None:
        static = conditions.static_on_volume(filter_, fire_duration.duration,
                                             volume_static_threshold,
                                             exclude_errors=exclude_errors)
        pct = conditions.volume_sc(filter_, current_window=fire_duration.duration,
                                   historical_window=5 * fire_duration.duration,
                                   fire_drop=volume_pct_threshold, clear_drop=volume_pct_threshold,
                                   exclude_errors=exclude_errors)['on']
        on = conds['on'] and static and pct
    elif volume_static_threshold is not None:
          static = conditions.static_on_volume(filter_, fire_duration.duration,
                                               volume_static_threshold,
                                               exclude_errors=exclude_errors)
          on = conds['on'] and static
    elif volume_pct_threshold is not None:
        pct = conditions.volume_sc(filter_, current_window=fire_duration.duration,
                                   historical_window=5 * fire_duration.duration,
                                   fire_drop=volume_pct_threshold, clear_drop=volume_pct_threshold,
                                   exclude_errors=exclude_errors)['on']
        on = conds['on'] and pct
    else:
        on = conds['on']
    return detect(on, off=conds['off'], annotations=conds['annotations'],
                  event_annotations=conds['event_annotations'])
