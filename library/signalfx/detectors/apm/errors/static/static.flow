from signalfx.detectors.apm.errors import streams, conditions


def detector(current_window=duration('5m'),
             fire_rate_threshold=0.01, clear_rate_threshold=0.001,
             attempt_threshold=1, filter_=None, group_by=None):
    # Detect when error rate exceeds a static threshold
    # :param current_window (duration): window on which error rate is calculated,
    #                                      default=duration('5m')
    # :param fire_rate_threshold (number): error rate needed to trigger, expressed as number
    #                               between 0 and 1, default=0.01
    # :param clear_rate_threshold (number) : error rate needed to clear, expressed as number
    #                               between 0 and 1, default=0.001
    # :param attempt_threshold (?integer?) : threshold on number of attempts (errors + non-errors)
    #                    in the window being evaluated in order to trigger, default=1
    # :param filter_ (filter): specifies dimensional scope of the detector, default=None
    # :param group_by (list of strings): group errors and non-errors by these (in addition to default grouping
    #                    by cluster, service, operation), default=None
    # :return: detect block that triggers when the error rate for filter_,
    #    grouped by group_by, over the last current_window is greater than fire_rate_threshold,
    #    and when at least attempt_threshold requests were made over the last current_window;
    #    clears when the error rate is below clear_rate_threshold
    current_window_ = duration(current_window)
    assert fire_rate_threshold >= clear_rate_threshold, {
        'fire_rate_threshold': fire_rate_threshold, 'clear_rate_threshold': clear_rate_threshold,
        'sfui_errorKeys': ['fire_rate_threshold', 'clear_rate_threshold'],
        'sfui_errorTemplate': "{{{fire_rate_threshold}}} must be greater than or equal to {{{clear_rate_threshold}}}."}
    err_pct = streams.error_rate(duration_=current_window_, filter_=filter_,
                                 group_by=group_by) * 100
    fire_pct_threshold = fire_rate_threshold * 100
    fire_pct_threshold_stream = const(fire_pct_threshold)
    clear_pct_threshold_stream = const(clear_rate_threshold * 100)
    ann = [annotate(err_pct, 'error percentage', {'sfui_streamType': 'signal'}),
           annotate(fire_pct_threshold_stream, 'fire_threshold', {
               'sfui_config': '{"ep_above_ft": {"sfui_streamType":"threshold","sfui_state":"fire","sfui_orientation":"above"}}'})]
    event_ann = {'current_window': str(current_window_),
                 'fire_pct_threshold': str(fire_pct_threshold),
                 'sfui_incidentInformation': '[{"selectedIdentifiers":["fire_pct_threshold_stream","err_pct"], "conditionIdentifier":"ep_above_ft"}]'}
    attempt_condition = conditions.volume(duration_=current_window_, shift=duration(0),
                                          filter_=filter_, group_by=group_by, num_error_threshold=0,
                                          num_attempt_threshold=attempt_threshold)
    return detect(when(err_pct > fire_pct_threshold_stream) and attempt_condition,
                  off=when(err_pct < clear_pct_threshold_stream),
                  annotations=ann,
                  event_annotations=event_ann)
