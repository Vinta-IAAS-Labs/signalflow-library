from signalfx.detectors.apm.errors import streams
from signalfx.detectors.apm import utils


def percentage_growth(current_window=duration('5m'), preceding_window=duration('1h'),
                      fire_growth_threshold=0.5, clear_growth_threshold=0.1,
                      filter_=None, group_by=None, custom_filter=None, use_kind_filter=True,
                      kind_filter=utils.KIND_FILTER,
                      error_true=utils.ERROR_TRUE, error_false=utils.ERROR_FALSE,
                      default_group_by=utils.DEFAULT_GROUPBY,
                      default_allow_missing=utils.DEFAULT_ALLOW_MISSING, r_up='delta',
                      metric_names=utils.PCTILE_TO_METRIC):
    #
    # Compares current error rate to multiple of preceding error rate.
    #:param current_window:
    #:param preceding_window:
    #:param growth_threshold:
    #:param filter_:
    #:param group_by:
    #:return: (condition) when the (filtered and grouped) error rate calculated over the
    #            specified window is an increase of the specified percentage threshold over the same
    #            rate calculated over the preceding window
    assert fire_growth_threshold >= clear_growth_threshold
    current_window_ = duration(current_window)
    preceding_window_ = duration(preceding_window)
    current_error_rate = streams.error_rate(duration_=current_window_, filter_=filter_,
                                            group_by=group_by, custom_filter=custom_filter,
                                            use_kind_filter=use_kind_filter,
                                            kind_filter=kind_filter,
                                            error_true=error_true, error_false=error_false,
                                            default_group_by=default_group_by,
                                            default_allow_missing=default_allow_missing,
                                            r_up=r_up, metric_names=metric_names)
    preceding_error_rate = streams.error_rate(duration_=preceding_window_, filter_=filter_,
                                              group_by=group_by,
                                              custom_filter=custom_filter,
                                              use_kind_filter=use_kind_filter,
                                              kind_filter=kind_filter,
                                              error_true=error_true, error_false=error_false,
                                              default_group_by=default_group_by,
                                              default_allow_missing=default_allow_missing,
                                              r_up=r_up, metric_names=metric_names).timeshift(current_window_)
    ann = [annotate(current_error_rate, 'current error rate', {'sfui_streamType': 'signal'}),
           annotate(preceding_error_rate, 'preceding error rate', {'sfui_streamType': 'signal'})]
    event_ann = {'current_window': str(current_window_),
                 'preceding_window': str(preceding_window_),
                 'fire_growth_threshold': str(fire_growth_threshold),
                 'clear_growth_threshold': str(clear_growth_threshold)}
    return {'on': when(current_error_rate > (1 + fire_growth_threshold) * preceding_error_rate),
            'off': when(current_error_rate < (1 + clear_growth_threshold) * preceding_error_rate),
            'annotations': ann,
            'event_annotations': event_ann}


def volume(duration_=duration('5m'), shift=duration(0), filter_=None, group_by=None,
           num_error_threshold=1,
           num_attempt_threshold=1, custom_filter=None, use_kind_filter=True,
           kind_filter=utils.KIND_FILTER,
           error_true=utils.ERROR_TRUE, error_false=utils.ERROR_FALSE,
           default_group_by=utils.DEFAULT_GROUPBY,
           default_allow_missing=utils.DEFAULT_ALLOW_MISSING, r_up='delta',
           metric_names=utils.PCTILE_TO_METRIC):
    #
    #:param duration_:
    #:param filter_:
    #:param group_by:
    #:param num_errors:
    #:param num_attempts:
    #:return: (condition) when the (filtered and grouped) error count calculated over the specified
    #                (possibly shifted) duration exceeds the specified threshold and the attempt
    #                count (calculated over the same shifted duration) exceeds the specified (other)
    #                threshold
    duration__ = duration(duration_)
    shift_ = duration(shift)
    gped_e_streams = streams.grouped_span_errors(filter_=filter_, group_by=group_by,
                                                 custom_filter=custom_filter,
                                                 use_kind_filter=use_kind_filter,
                                                 kind_filter=kind_filter,
                                                 error_true=error_true, error_false=error_false,
                                                 default_group_by=default_group_by,
                                                 default_allow_missing=default_allow_missing,
                                                 r_up=r_up, metric_names=metric_names)
    e = gped_e_streams['errors'].sum(over=duration__).timeshift(shift_)
    n_e = gped_e_streams['non_errors'].sum(over=duration__).timeshift(shift_)
    return when(e > num_error_threshold and e + n_e > num_attempt_threshold)


def error_rate_static(current_window=duration('5m'), filter_=None, group_by=None,
                      fire_rate_threshold=0.01, clear_rate_threshold=0.001, custom_filter=None,
                      use_kind_filter=True, kind_filter=utils.KIND_FILTER,
                      error_true=utils.ERROR_TRUE, error_false=utils.ERROR_FALSE,
                      default_group_by=utils.DEFAULT_GROUPBY,
                      default_allow_missing=utils.DEFAULT_ALLOW_MISSING, r_up='delta',
                      metric_names=utils.PCTILE_TO_METRIC):
    #
    #:param current_window:
    #:param filter_:
    #:param group_by:
    #:param rate_threshold:
    #:return: (condition) when the (filtered and grouped) error rate calculated over the
    #            specified duration exceeds the specified threshold
    assert fire_rate_threshold >= clear_rate_threshold
    current_window_ = duration(current_window)
    err_rate = streams.error_rate(duration_=current_window_, filter_=filter_, group_by=group_by,
                                  custom_filter=custom_filter, use_kind_filter=use_kind_filter,
                                  kind_filter=kind_filter,
                                  error_true=error_true, error_false=error_false,
                                  default_group_by=default_group_by,
                                  default_allow_missing=default_allow_missing, r_up=r_up,
                                  metric_names=metric_names)
    ann = [annotate(err_rate, 'error rate', {'sfui_streamType': 'signal'})]
    event_ann = {'current_window': str(current_window_),
                 'fire_rate_threshold': str(fire_rate_threshold),
                 'clear_rate_threshold': str(clear_rate_threshold)}
    return {'on': when(err_rate > fire_rate_threshold),
            'off': when(err_rate < clear_rate_threshold),
            'annotations': ann,
            'event_annotations': event_ann}
