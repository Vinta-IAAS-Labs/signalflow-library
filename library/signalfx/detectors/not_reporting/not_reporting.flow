# Detects when a stream stops reporting.
#
# The stream is assumed to have been filtered to specify the population of interest. The detector
# fires when the stream has not reported for a given duration (default value is 15 minutes).
# By default this produces one detector for each signal in the stream. One can optionally
# specify an entity by which to group the stream (e.g., 'host', 'aws_tag_Name'); if specified,
# the detector will then fire when no stream members for that entity have reported in the window.
#
# @author joe


def detector(stream, resource_identifier=None, duration=duration('15m')):
    # Args:
    #     stream: data stream to monitor for non-reporting
    #     resource_identifier (String): a field that identifies the unit to monitor
    #         (optional, default=None corresponds to no aggregation)
    #     duration (duration) : specifies for how long unit must be unmonitored to
    #         fire an alert (optional, default='15m')
    #
    # Returns:
    #     detect block that fires when the stream has not emitted for duration
    if resource_identifier is None:
        binary = stream.map(lambda x: 1 if x is not None else 0)
    else:
        binary = stream.sum(by=resource_identifier).map(lambda x: 1 if x is not None else 0)
    annotations = [annotate(binary, "indicator signal", {'streamType': 'signal',
                                                         'staticFireThreshold': 1,
                                                         'staticFireType': 'below'})]
    return detect(when(binary < 1, lasting(duration, 1.0)), annotations)

    # example

    # terminate_filter = filter("sf_tags", "sfhost_terminated")
    # aws_terminate_filter = filter("aws_state", "{Code: 48,Name: terminated}")
    # expect_dead = terminate_filter or aws_terminate_filter
    # detector(data('cpu.utilization', not expect_dead),
    #                       resource_identifier='aws_tag_Name').publish('is_down')

    # detector(data('cpu.utilization', not expect_dead),
    #                      resource_identifier=['aws_tag_Name', 'host']).publish('is_down')
