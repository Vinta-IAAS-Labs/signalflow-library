from signalfx.detectors.autodetect import utils
from signalfx.detectors.autodetect.infra.aws import utils as aws_utils
from signalfx.detectors.against_recent import against_recent

def input_processing_record_failed_detector(fire_num_stddev: float = 3.5,
                                            current_window: duration = duration('10m'),
                                            historical_window: duration = duration('1h'),
                                            filter_: filter = None):
    # :param fire_num_stddev label=Trigger deviation
    # :param fire_num_stddev description=Expressed in standard deviations from baseline
    # :param fire_num_stddev min=0
    # :param fire_num_stddev step=0.1
    # :param fire_num_stddev unit=SD
    # :param current_window label=Evaluation window
    # :param historical_window label=Historical window
    # :param filter_ metric_name=InputProcessing.ProcessingFailedRecords
    # :return: detect block that triggers when number of records failed returned by lambda function marked with ProcessingFailed suddenly increased
    initial_filter = filter(utils.NAMESPACE_DIM, aws_utils.KINESIS_ANALYTICS_NAMESPACE) and filter(utils.STAT_DIM, 'mean')
    group_by = ['AWSUniqueId', 'Application', 'Flow', 'aws_account_id', 'aws_region']
    scope_filter = utils.merge_filters(initial_filter, filter_)
    stream = data('InputProcessing.ProcessingFailedRecords', filter=scope_filter, rollup='average', resolution='60s').mean(by=group_by).publish(label='Average # of records failed')
    clear_num_stddev = max(fire_num_stddev - 0.5, 0)
    return against_recent.detector_mean_std(stream=stream,
                                            current_window=current_window,
                                            historical_window=historical_window,
                                            fire_num_stddev=fire_num_stddev,
                                            clear_num_stddev=clear_num_stddev,
                                            orientation='above',
                                            ignore_extremes=True,
                                            calculation_mode='vanilla',
                                            auto_resolve_after=utils.AUTO_RESOLVE_AFTER)


def bytes_sudden_change_detector(fire_num_stddev: float = 3.5,
                                 current_window: duration = duration('10m'),
                                 historical_window: duration = duration('1h'),
                                 filter_: filter = None):
    # :param fire_num_stddev label=Trigger deviation
    # :param fire_num_stddev description=Expressed in standard deviations from baseline
    # :param fire_num_stddev min=0
    # :param fire_num_stddev step=0.1
    # :param fire_num_stddev unit=SD
    # :param current_window label=Evaluation window
    # :param historical_window label=Historical window
    # :param filter_ metric_name=Bytes
    # :return: detect block that triggers when number of bytes read (per input stream) or written (per output stream) suddenly increased
    initial_filter = filter(utils.NAMESPACE_DIM, aws_utils.KINESIS_ANALYTICS_NAMESPACE) and filter(utils.STAT_DIM, 'mean')
    group_by = ['Flow', 'AWSUniqueId', 'aws_account_id']
    scope_filter = utils.merge_filters(initial_filter, filter_)
    stream = data('Bytes', filter=scope_filter, rollup='average', resolution='60s').mean(by=group_by).publish(label='Number of bytes read or written')
    clear_num_stddev = max(fire_num_stddev - 0.5, 0)
    return against_recent.detector_mean_std(stream=stream,
                                            current_window=current_window,
                                            historical_window=historical_window,
                                            fire_num_stddev=fire_num_stddev,
                                            clear_num_stddev=clear_num_stddev,
                                            orientation='above',
                                            ignore_extremes=True,
                                            calculation_mode='vanilla',
                                            auto_resolve_after=utils.AUTO_RESOLVE_AFTER)
