from signalfx.detectors.autodetect import utils
from signalfx.detectors.autodetect.infra.azure import utils as azure_utils

def eDTU_utilization_detector(fire_threshold: float = 80, 
                                 fire_lasting: lasting = lasting('10m', 0.8),
                                 clear_threshold: float = 80,
                                 clear_lasting: lasting = lasting('10m', 0.8),
                                 filter_: filter = None):
    # Detects when eDTU utilization is above threshold
    # :param fire_threshold description=Specifies trigger threshold in % for the eDTU utilization
    # :param fire_threshold label=Trigger threshold (%)
    # :param fire_threshold min=0
    # :param fire_threshold max=100
    # :param fire_threshold unit=%
    # :param fire_lasting description=Specifies trigger sensitivity associated with trigger threshold
    # :param fire_lasting label=Trigger sensitivity
    # :param clear_threshold description=Specifies clear threshold in % for the eDTU utilization
    # :param clear_threshold label=Clear threshold (%)
    # :param clear_threshold min=0
    # :param clear_threshold max=100
    # :param clear_threshold unit=%
    # :param clear_threshold constraint=lte(fire_threshold)
    # :param clear_lasting description=Specifies clear sensitivity associated with clear threshold
    # :param clear_lasting label=Clear sensitivity
    # :param filter_ description=Specifies dimensional scope of the detector
    # :param filter_ metric_name=dtu_consumption_percent
    # :viz valueSuffix=%
    # :return: detect block that triggers when eDTU utilization is above the threshold
    
    assert fire_threshold >= clear_threshold, utils.threshold_validation_err_msg(fire_threshold, clear_threshold,
                                                                                 orientation='above')
    initial_filter = filter(azure_utils.RESOURCE_TYPE, azure_utils.ELASTIC_POOLS) and filter(azure_utils.PRIMARY_AGGREGATION_TYPE, "true")
    scope_filter = utils.merge_filters(initial_filter, filter_)
    stream = data('dtu_consumption_percent', filter=scope_filter).sum(by=azure_utils.AZURE_GROUP_BY)
    

    fire_threshold_stream = const(fire_threshold)
    clear_threshold_stream = const(clear_threshold)

    ann = [utils.annotate_stream(stream, 'eDTU utilization'),
           utils.annotate_fire_threshold(fire_threshold_stream, orientation='above')]

    return detect(when(stream >= fire_threshold_stream, lasting = fire_lasting),
                  off=when(stream < clear_threshold_stream, lasting = clear_lasting),
                  annotations=ann,
                  auto_resolve_after=utils.AUTO_RESOLVE_AFTER)

def cpu_utilization_detector(fire_threshold: float = 80, 
                                 fire_lasting: lasting = lasting('10m', 0.8),
                                 clear_threshold: float = 80,
                                 clear_lasting: lasting = lasting('10m', 0.8),
                                 filter_: filter = None):
    # Detects when CPU utilization of elastic pool is above threshold
    # :param fire_threshold description=Specifies trigger threshold in % for the CPU utilization
    # :param fire_threshold label=Trigger threshold (%)
    # :param fire_threshold min=0
    # :param fire_threshold max=100
    # :param fire_threshold unit=%
    # :param fire_lasting description=Specifies trigger sensitivity associated with trigger threshold
    # :param fire_lasting label=Trigger sensitivity
    # :param clear_threshold description=Specifies clear threshold in % for the CPU utilization
    # :param clear_threshold label=Clear threshold (%)
    # :param clear_threshold min=0
    # :param clear_threshold max=100
    # :param clear_threshold unit=%
    # :param clear_threshold constraint=lte(fire_threshold)
    # :param clear_lasting description=Specifies clear sensitivity associated with clear threshold
    # :param clear_lasting label=Clear sensitivity
    # :param filter_ description=Specifies dimensional scope of the detector
    # :param filter_ metric_name=cpu_percent
    # :viz valueSuffix=%
    # :return: detect block that triggers when CPU utilization of elastic pool is above the threshold
    
    assert fire_threshold >= clear_threshold, utils.threshold_validation_err_msg(fire_threshold, clear_threshold,
                                                                                 orientation='above')
    initial_filter = filter(azure_utils.RESOURCE_TYPE, azure_utils.ELASTIC_POOLS) and filter(azure_utils.PRIMARY_AGGREGATION_TYPE, "true")
    scope_filter = utils.merge_filters(initial_filter, filter_)
    stream = data('cpu_percent', filter=scope_filter).sum(by=azure_utils.AZURE_GROUP_BY)
    

    fire_threshold_stream = const(fire_threshold)
    clear_threshold_stream = const(clear_threshold)

    ann = [utils.annotate_stream(stream, 'CPU utilization'),
           utils.annotate_fire_threshold(fire_threshold_stream, orientation='above')]

    return detect(when(stream >= fire_threshold_stream, lasting = fire_lasting),
                  off=when(stream < clear_threshold_stream, lasting = clear_lasting),
                  annotations=ann,
                  auto_resolve_after=utils.AUTO_RESOLVE_AFTER)


def storage_utilization_detector(fire_threshold: float = 80,
                                 fire_lasting: lasting = lasting('10m', 0.8),
                                 clear_threshold: float = 80,
                                 clear_lasting: lasting = lasting('10m', 0.8),
                                 filter_: filter = None):
    # Detects when storage utilization of elastic pool is above threshold
    # :param fire_threshold description=Specifies trigger threshold in % for the storage utilization
    # :param fire_threshold label=Trigger threshold (%)
    # :param fire_threshold min=0
    # :param fire_threshold max=100
    # :param fire_threshold unit=%
    # :param fire_lasting description=Specifies trigger sensitivity associated with trigger threshold
    # :param fire_lasting label=Trigger sensitivity
    # :param clear_threshold description=Specifies clear threshold in % for the storage utilization
    # :param clear_threshold label=Clear threshold (%)
    # :param clear_threshold min=0
    # :param clear_threshold max=100
    # :param clear_threshold unit=%
    # :param clear_threshold constraint=lte(fire_threshold)
    # :param clear_lasting description=Specifies clear sensitivity associated with clear threshold
    # :param clear_lasting label=Clear sensitivity
    # :param filter_ description=Specifies dimensional scope of the detector
    # :param filter_ metric_name=storage_percent
    # :viz valueSuffix=%
    # :return: detect block that triggers when Storage utilization of elastic pool is above the threshold

    assert fire_threshold >= clear_threshold, utils.threshold_validation_err_msg(fire_threshold, clear_threshold,
                                                                                 orientation='above')
    initial_filter = filter(azure_utils.RESOURCE_TYPE, azure_utils.ELASTIC_POOLS) and filter(
        azure_utils.PRIMARY_AGGREGATION_TYPE, "true")
    scope_filter = utils.merge_filters(initial_filter, filter_)
    stream = data('storage_percent', filter=scope_filter).sum(by=azure_utils.AZURE_GROUP_BY).publish(
        "Storage utilization")

    fire_threshold_stream = const(fire_threshold)
    clear_threshold_stream = const(clear_threshold)

    ann = [utils.annotate_stream(stream, 'Storage utilization'),
           utils.annotate_fire_threshold(fire_threshold_stream, orientation='above')]

    return detect(when(stream >= fire_threshold_stream, lasting=fire_lasting),
                  off=when(stream < clear_threshold_stream, lasting=clear_lasting),
                  annotations=ann,
                  auto_resolve_after=utils.AUTO_RESOLVE_AFTER)
