# The main function transforms a stream, assumed to specify a population of interest, into
# a detector which fires when a member of the population becomes an outlier.
#
# The basic toggles are:
#   strategy (mean + standard deviations, or median + median absolute deviations),
#   the number of deviations (determining the sensitivity of the detector),
#   and the orientation (above, below, or out-of-band).
#
# By default the firing and clearing thresholds are different (to reduce flappiness).
# One can also associate lasting objects with the firing and clearing thresholds (by default,
#   both are "100% of 5 minutes").
# Grouping the population is also supported.
#
# @author joe


def median_MAD_threshold(population_stream, group_by_property=None, num_MAD=1):
    population_median = population_stream.median(by=group_by_property)
    population_MAD = (population_stream - population_median).abs().median(by=group_by_property)
    return population_median + num_MAD * population_MAD


def detector(population_stream,
             group_by_property=None,
             fire_num_dev=3, fire_lasting=lasting('5m', 1.0),
             clear_num_dev=2.5, clear_lasting=lasting('5m', 1.0),
             strategy='median_MAD', orientation='above'):
    # Args:
    #     population_stream: data stream specifying a population of emitters
    #     group_by_property (optional, default=None): attribute by which to group population members
    #         before calculating; default behavior (None) is that all members belong to one group
    #     fire_num_dev (number): number of standard deviations above mean required to fire
    #           (optional, default=3)
    #     fire_lasting (lasting): lasting object associated with fire threshold
    #           (optional, default=lasting('5m', 1.0))
    #     clear_num_dev (number): number of standard deviations above mean required to clear,
    #         should have clear_num_stddev <= fire_num_stddev (optional, default=2.5)
    #     clear_lasting (lasting): lasting object associated with clear threshold
    #           (optional, default=lasting('5m', 1.0))
    #     strategy (string): represents method for defining threshold (mean+stddev or median+MAD),
    #           (optional, default='median_MAD', one of 'mean_stddev', 'median_MAD')
    #     orientation (string): specifies whether detect fires when signal is above, below, or
    #           or out-of-band (optional, default='above', one of 'above', 'below', 'out_of_band')
    #     #
    # Returns:
    #     detect block that fires when a member of the population is at least
    #
    #
    #         deviations above the population  (for parameters specified by fire_lasting) and
    #
    #
    # clears
    #         when that member is no more than clear_num_stddev standard deviations above the
    #         poplation mean (for parameters specified by clear_lasting)
    def t(x):
        if strategy == 'mean_stddev':
            return population_stream.mean_plus_stddev(stddevs=x, by=group_by_property)
        elif strategy == 'median_MAD':
            return median_MAD_threshold(population_stream,
                                        group_by_property=group_by_property,
                                        num_MAD=x)

    fire_top = t(fire_num_dev)
    clear_top = t(clear_num_dev)
    clear_bot = t(-1 * clear_num_dev)
    fire_bot = t(-1 * fire_num_dev)
    annotations = [annotate(population_stream, 'population stream', {'streamType': 'signal'}),
                   annotate(fire_top, 'upper fire threshold', {'streamType': 'upperFireThreshold',
                                                               'influencedBy': fire_num_dev}),
                   annotate(fire_bot, 'lower fire threshold', {'streamType': 'lowerFireThreshold',
                                                               'influencedBy': fire_num_dev}),
                   annotate(clear_bot, 'lower clear threshold',
                            {'streamType': 'lowerClearThreshold',
                             'influencedBy': clear_num_dev}),
                   annotate(clear_top, 'upper clear threshold',
                            {'streamType': 'upperClearThreshold',
                             'influencedBy': clear_num_dev})]
    if orientation == 'above':
        return detect(when(population_stream > fire_top, fire_lasting),
                      when(population_stream < clear_top, clear_lasting),
                      annotations=annotations)
    elif orientation == 'below':
        return detect(when(population_stream < fire_bot, fire_lasting),
                      when(population_stream > clear_bot, clear_lasting),
                      annotations=annotations)
    elif orientation == 'out_of_band':
        return detect(
            when(population_stream > fire_top or population_stream < fire_bot, fire_lasting),
            when(population_stream < clear_top and population_stream > clear_bot, clear_lasting),
            annotations=annotations)

# examples
# some_data = data('jvm.cpu.load')
# detector(some_data, strategy='median_MAD', orientation='out_of_band').publish('MAD_OOB')
# detector(some_data, fire_num_dev=2, clear_num_dev=1, orientation='below').publish('mstd_below')
# detector(some_data, group_by_property=['aws_instance_type'],
#    fire_num_dev=2, clear_num_dev=1, orientation='below').publish('mstd_below')
