from signalfx.detectors.apm.errors.static import static
from signalfx.detectors.apm import utils as apm_utils
from signalfx.detectors.rum import utils as rum_utils


def detector(current_window=duration('5m'),
             fire_rate_threshold=0.01, clear_rate_threshold=0.001,
             attempt_threshold=1, filter_=None, group_by=None, custom_filter=None,
             resource_type='resource_request', use_node_name=True,
             auto_resolve_after=None):
    _key = rum_utils.make_key(resource_type, use_node_name=use_node_name)
    if apm_utils.RESOURCE_TYPE_MAPPING[_key]['metric_names']['count'] is None:
        assert 0 > 1, {'sfui_errorTemplate': "this resource type does not report counts"}
    if apm_utils.RESOURCE_TYPE_MAPPING[_key]['error']['false'] is None:
        assert 0 > 1, {
            'sfui_errorTemplate': "this resource type does not report sf_error dimension"}
    return static.detector(current_window=current_window,
                           fire_rate_threshold=fire_rate_threshold,
                           clear_rate_threshold=clear_rate_threshold,
                           attempt_threshold=attempt_threshold, filter_=filter_, group_by=group_by,
                           custom_filter=custom_filter,
                           use_kind_filter=False, kind_filter=apm_utils.V2_KIND_FILTER, r_up='sum',
                           error_true=apm_utils.RESOURCE_TYPE_MAPPING[_key]['error']['true'],
                           error_false=apm_utils.RESOURCE_TYPE_MAPPING[_key]['error']['false'],
                           default_group_by=apm_utils.RESOURCE_TYPE_MAPPING[_key]['group_by'],
                           default_allow_missing=apm_utils.RESOURCE_TYPE_MAPPING[_key]['allow_missing'],
                           metric_names=apm_utils.RESOURCE_TYPE_MAPPING[_key]['metric_names'],
                           auto_resolve_after=auto_resolve_after, _alert_type='error.count',
                           _detector_type='rum', _resource_type=resource_type)
